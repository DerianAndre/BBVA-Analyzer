import Head from "next/head";
import { useState } from "react";

export default function Home() {
  const [table, setTable] = useState(false);
  const [input, setInput] = useState("");
  const [data, setData] = useState(null);
  const [saldo, setSaldo] = useState(0);
  const [total, setTotal] = useState(0);
  const [totalMensual, setTotalMensual] = useState(0);
  const [debug, setDebug] = useState(false);

  const formatter = new Intl.NumberFormat("es-MX", {
    style: "currency",
    currency: "MXN",

    // These options are needed to round to whole numbers if that's what you want.
    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)
    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)
  });

  const resetForm = () => {
    setTable(false);
    setInput("");
    setData(null);
    setTotal(0);
    setTotalMensual(0);
  };

  const handleInputChange = (e) => {
    setSaldo(e.target.value);
  };

  const handleTextareaChange = (e) => {
    setInput(e.target.value);
  };

  const handleCheckboxChange = (e) => {
    setDebug(e.target.checked);
  };

  const handleSubmit = () => {
    const parsedData = parseHTMLTable(input);
    setData(parsedData);
    // console.log('in', input);
    // console.log('out', parsedData)
  };

  const createElementFromHTML = (htmlString) => {
    const div = document.createElement("div");
    div.innerHTML = htmlString.trim();
    const tableHTML = div.getElementsByTagName("table");
    setTable(true);
    return tableHTML;
  };

  const parseHTMLTable = (tableHTML) => {
    if (!tableHTML) return;

    const table = createElementFromHTML(tableHTML)[0];

    if (!table) return;

    let header = [];
    let rows = [];

    for (let i = 0; i < table.rows[0].cells.length; i++) {
      header.push(table.rows[0].cells[i].innerHTML);
    }

    for (let i = 1; i < table.rows.length; i++) {
      const row = {};

      for (let j = 0; j < table.rows[i].cells.length; j++) {
        const inner = table.rows[i].cells[j].innerHTML;
        if (inner && inner !== "-") {
          row["Id"] = i;
          row[header[j]] = inner;
        }
      }

      rows.push(row);
    }

    const total = rows.reduce((total, object) => {
      return (
        total +
        ((object?.Importe && Number(object?.Importe.replace(/[$,]/g, ""))) || 0)
      );
    }, 0);

    const totalMensual = rows.reduce((total, object) => {
      const value =
        (object?.Importe && Number(object?.Importe.replace(/[$,]/g, ""))) ||
        0 ||
        0;
      const plazos = object?.Plazo || 0;
      return total + value / plazos;
    }, 0);

    setTotal(total);
    setTotalMensual(totalMensual);

    rows = rows.map((item) => {
      item["Mensualidad"] = (
        Number(item?.Importe.replace(/[$,]/g, "")) / Number(item["Plazo"])
      ).toFixed(2);

      return item;
    });

    return rows;
  };

  const createTable = () => {
    return (
      <table className="table table-sm small">
        <thead>
          <tr>
            {Object.keys(data[0]).map((key) => (
              <th key={key}>{key}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {data.map((item) => (
            <tr key={item.Id + Math.random()}>
              {Object.values(item).map((val) => (
                <td key={val + Math.random()}>{val}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    );
  };

  return (
    <div className="container py-5" style={{ maxWidth: 800 }}>
      <Head>
        <title>BBVA Analyzer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="mb-4">BBVA Analyzer</h1>

        <div className="d-flex mb-4">
          <div className="form-check form-switch">
            <input
              className="form-check-input"
              type="checkbox"
              role="switch"
              id="debug"
              name="debug"
              onClick={handleCheckboxChange}
            />
            <label className="form-check-label" htmlFor="debug">
              Debug
            </label>
          </div>
        </div>
        {!data && (
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label htmlFor="input">Saldo a la fecha</label>
              <input
                type="text"
                className="form-control"
                id="input"
                onChange={handleInputChange}
              />
            </div>
            <p className="lead">
              Ingresa los datos de tabla obtenidos de BBVA Web
            </p>
            <div className="mb-4">
              <label className="form-label" htmlFor="table">
                Tabla HTML
              </label>
              <textarea
                className="form-control"
                name="table"
                id="table"
                cols="30"
                rows="10"
                onChange={handleTextareaChange}
                placeholder="<table>...</table>"
              ></textarea>
            </div>
            <button className="btn btn-primary btn-lg" type="submit">
              Analizar datos
            </button>
          </form>
        )}

        {data && (
          <>
            <div className="card shadow border border-1 mb-4">
              <div className="card-body">
                <h5 className="card-title mb-4">Resultados</h5>
                <table className="table table-striped table-hover mb-0">
                  <tbody>
                    <tr>
                      <th scope="row">Deuda total</th>
                      <td>{saldo ? formatter.format(saldo) : 0}</td>
                    </tr>
                    <tr>
                      <th scope="row">Deuda al mes</th>
                      <td>
                        {saldo && total ? formatter.format(saldo - total) : 0}
                      </td>
                    </tr>
                    <tr>
                      <th scope="row">Deuda mensual (Compras MSI)</th>
                      <td>{total ? formatter.format(total) : 0}</td>
                    </tr>
                    <tr>
                      <th scope="row">Pago mensual de compras a meses</th>
                      <td>
                        {totalMensual ? formatter.format(totalMensual) : 0}
                      </td>
                    </tr>
                    <tr className="table-dark">
                      <th scope="row">Pago mensual total</th>
                      <td>
                        {saldo && total && totalMensual
                          ? formatter.format(saldo - total + totalMensual)
                          : 0}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>

            {table && (
              <>
                <div className="card shadow border border-1 mb-4">
                  <div className="card-body">
                    <h5 className="card-title mb-4">Deudas a meses</h5>
                    {createTable()}
                  </div>
                </div>
              </>
            )}

            {debug && (
              <>
                <h3>Debug</h3>
                <div className="card shadow border border-1 mb-4">
                  <div className="card-body">
                    <div className="row">
                      <div className="col-12 col-md-6">
                        <h5>Input</h5>
                        <div className="border border-1">
                          <small>
                            <code
                              className="d-block overflow-auto"
                              style={{ height: "200px" }}
                            >
                              <p className="lh-1 text-break">{input}</p>
                            </code>
                          </small>
                        </div>
                      </div>
                      <div className="col-12 col-md-6">
                        <h5>Output</h5>
                        <div className="border border-1">
                          <small>
                            <code>
                              <pre
                                className="lh-1 m-0"
                                style={{ height: "200px" }}
                              >
                                {JSON.stringify(data, null, 2)}
                              </pre>
                            </code>
                          </small>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </>
            )}

            <button
              className="btn btn-danger rounded-pill px-5"
              onClick={resetForm}
            >
              Reiniciar datos
            </button>
          </>
        )}
      </main>
    </div>
  );
}
